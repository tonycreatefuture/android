package com.zhongdasoft.svwtrainnet.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhongdasoft.svwtrainnet.greendao.entity.UserFavorite;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_FAVORITE".
*/
public class UserFavoriteDao extends AbstractDao<UserFavorite, Long> {

    public static final String TABLENAME = "USER_FAVORITE";

    /**
     * Properties of entity UserFavorite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property MenuName = new Property(2, String.class, "menuName", false, "MENU_NAME");
        public final static Property Saved = new Property(3, Boolean.class, "saved", false, "SAVED");
        public final static Property TmpSaved = new Property(4, Boolean.class, "tmpSaved", false, "TMP_SAVED");
        public final static Property Fixed = new Property(5, Boolean.class, "fixed", false, "FIXED");
    }


    public UserFavoriteDao(DaoConfig config) {
        super(config);
    }
    
    public UserFavoriteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_FAVORITE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_NAME\" TEXT NOT NULL ," + // 1: userName
                "\"MENU_NAME\" TEXT NOT NULL ," + // 2: menuName
                "\"SAVED\" INTEGER NOT NULL ," + // 3: saved
                "\"TMP_SAVED\" INTEGER NOT NULL ," + // 4: tmpSaved
                "\"FIXED\" INTEGER NOT NULL );"); // 5: fixed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_FAVORITE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserFavorite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserName());
        stmt.bindString(3, entity.getMenuName());
        stmt.bindLong(4, entity.getSaved() ? 1L: 0L);
        stmt.bindLong(5, entity.getTmpSaved() ? 1L: 0L);
        stmt.bindLong(6, entity.getFixed() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserFavorite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserName());
        stmt.bindString(3, entity.getMenuName());
        stmt.bindLong(4, entity.getSaved() ? 1L: 0L);
        stmt.bindLong(5, entity.getTmpSaved() ? 1L: 0L);
        stmt.bindLong(6, entity.getFixed() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserFavorite readEntity(Cursor cursor, int offset) {
        UserFavorite entity = new UserFavorite( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // userName
            cursor.getString(offset + 2), // menuName
            cursor.getShort(offset + 3) != 0, // saved
            cursor.getShort(offset + 4) != 0, // tmpSaved
            cursor.getShort(offset + 5) != 0 // fixed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserFavorite entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.getString(offset + 1));
        entity.setMenuName(cursor.getString(offset + 2));
        entity.setSaved(cursor.getShort(offset + 3) != 0);
        entity.setTmpSaved(cursor.getShort(offset + 4) != 0);
        entity.setFixed(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserFavorite entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserFavorite entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserFavorite entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
