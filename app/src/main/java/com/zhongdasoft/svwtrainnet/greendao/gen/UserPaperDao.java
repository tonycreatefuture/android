package com.zhongdasoft.svwtrainnet.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhongdasoft.svwtrainnet.greendao.entity.UserPaper;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_PAPER".
*/
public class UserPaperDao extends AbstractDao<UserPaper, Long> {

    public static final String TABLENAME = "USER_PAPER";

    /**
     * Properties of entity UserPaper.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property ExamineeId = new Property(2, String.class, "examineeId", false, "EXAMINEE_ID");
        public final static Property DbName = new Property(3, String.class, "dbName", false, "DB_NAME");
        public final static Property PlanId = new Property(4, String.class, "planId", false, "PLAN_ID");
        public final static Property PaperId = new Property(5, String.class, "paperId", false, "PAPER_ID");
        public final static Property PaperScore = new Property(6, Integer.class, "paperScore", false, "PAPER_SCORE");
        public final static Property TestName = new Property(7, String.class, "testName", false, "TEST_NAME");
        public final static Property ShowScore = new Property(8, Boolean.class, "showScore", false, "SHOW_SCORE");
        public final static Property Duration = new Property(9, Integer.class, "duration", false, "DURATION");
        public final static Property Status = new Property(10, Integer.class, "status", false, "STATUS");
        public final static Property RealBeginTime = new Property(11, String.class, "realBeginTime", false, "REAL_BEGIN_TIME");
        public final static Property RealEndTime = new Property(12, String.class, "realEndTime", false, "REAL_END_TIME");
        public final static Property BeginTime = new Property(13, String.class, "beginTime", false, "BEGIN_TIME");
        public final static Property EndTime = new Property(14, String.class, "endTime", false, "END_TIME");
        public final static Property LeftTime = new Property(15, Long.class, "leftTime", false, "LEFT_TIME");
        public final static Property Score = new Property(16, Float.class, "score", false, "SCORE");
        public final static Property ScoreInfo = new Property(17, String.class, "scoreInfo", false, "SCORE_INFO");
        public final static Property UserAnswer = new Property(18, String.class, "userAnswer", false, "USER_ANSWER");
    }


    public UserPaperDao(DaoConfig config) {
        super(config);
    }
    
    public UserPaperDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_PAPER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_NAME\" TEXT NOT NULL ," + // 1: userName
                "\"EXAMINEE_ID\" TEXT NOT NULL ," + // 2: examineeId
                "\"DB_NAME\" TEXT NOT NULL ," + // 3: dbName
                "\"PLAN_ID\" TEXT NOT NULL ," + // 4: planId
                "\"PAPER_ID\" TEXT NOT NULL ," + // 5: paperId
                "\"PAPER_SCORE\" INTEGER NOT NULL ," + // 6: paperScore
                "\"TEST_NAME\" TEXT NOT NULL ," + // 7: testName
                "\"SHOW_SCORE\" INTEGER NOT NULL ," + // 8: showScore
                "\"DURATION\" INTEGER NOT NULL ," + // 9: duration
                "\"STATUS\" INTEGER NOT NULL ," + // 10: status
                "\"REAL_BEGIN_TIME\" TEXT," + // 11: realBeginTime
                "\"REAL_END_TIME\" TEXT," + // 12: realEndTime
                "\"BEGIN_TIME\" TEXT," + // 13: beginTime
                "\"END_TIME\" TEXT," + // 14: endTime
                "\"LEFT_TIME\" INTEGER," + // 15: leftTime
                "\"SCORE\" REAL," + // 16: score
                "\"SCORE_INFO\" TEXT," + // 17: scoreInfo
                "\"USER_ANSWER\" TEXT);"); // 18: userAnswer
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_PAPER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserPaper entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserName());
        stmt.bindString(3, entity.getExamineeId());
        stmt.bindString(4, entity.getDbName());
        stmt.bindString(5, entity.getPlanId());
        stmt.bindString(6, entity.getPaperId());
        stmt.bindLong(7, entity.getPaperScore());
        stmt.bindString(8, entity.getTestName());
        stmt.bindLong(9, entity.getShowScore() ? 1L: 0L);
        stmt.bindLong(10, entity.getDuration());
        stmt.bindLong(11, entity.getStatus());
 
        String realBeginTime = entity.getRealBeginTime();
        if (realBeginTime != null) {
            stmt.bindString(12, realBeginTime);
        }
 
        String realEndTime = entity.getRealEndTime();
        if (realEndTime != null) {
            stmt.bindString(13, realEndTime);
        }
 
        String beginTime = entity.getBeginTime();
        if (beginTime != null) {
            stmt.bindString(14, beginTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(15, endTime);
        }
 
        Long leftTime = entity.getLeftTime();
        if (leftTime != null) {
            stmt.bindLong(16, leftTime);
        }
 
        Float score = entity.getScore();
        if (score != null) {
            stmt.bindDouble(17, score);
        }
 
        String scoreInfo = entity.getScoreInfo();
        if (scoreInfo != null) {
            stmt.bindString(18, scoreInfo);
        }
 
        String userAnswer = entity.getUserAnswer();
        if (userAnswer != null) {
            stmt.bindString(19, userAnswer);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserPaper entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserName());
        stmt.bindString(3, entity.getExamineeId());
        stmt.bindString(4, entity.getDbName());
        stmt.bindString(5, entity.getPlanId());
        stmt.bindString(6, entity.getPaperId());
        stmt.bindLong(7, entity.getPaperScore());
        stmt.bindString(8, entity.getTestName());
        stmt.bindLong(9, entity.getShowScore() ? 1L: 0L);
        stmt.bindLong(10, entity.getDuration());
        stmt.bindLong(11, entity.getStatus());
 
        String realBeginTime = entity.getRealBeginTime();
        if (realBeginTime != null) {
            stmt.bindString(12, realBeginTime);
        }
 
        String realEndTime = entity.getRealEndTime();
        if (realEndTime != null) {
            stmt.bindString(13, realEndTime);
        }
 
        String beginTime = entity.getBeginTime();
        if (beginTime != null) {
            stmt.bindString(14, beginTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(15, endTime);
        }
 
        Long leftTime = entity.getLeftTime();
        if (leftTime != null) {
            stmt.bindLong(16, leftTime);
        }
 
        Float score = entity.getScore();
        if (score != null) {
            stmt.bindDouble(17, score);
        }
 
        String scoreInfo = entity.getScoreInfo();
        if (scoreInfo != null) {
            stmt.bindString(18, scoreInfo);
        }
 
        String userAnswer = entity.getUserAnswer();
        if (userAnswer != null) {
            stmt.bindString(19, userAnswer);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserPaper readEntity(Cursor cursor, int offset) {
        UserPaper entity = new UserPaper( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // userName
            cursor.getString(offset + 2), // examineeId
            cursor.getString(offset + 3), // dbName
            cursor.getString(offset + 4), // planId
            cursor.getString(offset + 5), // paperId
            cursor.getInt(offset + 6), // paperScore
            cursor.getString(offset + 7), // testName
            cursor.getShort(offset + 8) != 0, // showScore
            cursor.getInt(offset + 9), // duration
            cursor.getInt(offset + 10), // status
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // realBeginTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // realEndTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // beginTime
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // endTime
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // leftTime
            cursor.isNull(offset + 16) ? null : cursor.getFloat(offset + 16), // score
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // scoreInfo
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // userAnswer
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserPaper entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.getString(offset + 1));
        entity.setExamineeId(cursor.getString(offset + 2));
        entity.setDbName(cursor.getString(offset + 3));
        entity.setPlanId(cursor.getString(offset + 4));
        entity.setPaperId(cursor.getString(offset + 5));
        entity.setPaperScore(cursor.getInt(offset + 6));
        entity.setTestName(cursor.getString(offset + 7));
        entity.setShowScore(cursor.getShort(offset + 8) != 0);
        entity.setDuration(cursor.getInt(offset + 9));
        entity.setStatus(cursor.getInt(offset + 10));
        entity.setRealBeginTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRealEndTime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBeginTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setEndTime(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLeftTime(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setScore(cursor.isNull(offset + 16) ? null : cursor.getFloat(offset + 16));
        entity.setScoreInfo(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUserAnswer(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserPaper entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserPaper entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserPaper entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
