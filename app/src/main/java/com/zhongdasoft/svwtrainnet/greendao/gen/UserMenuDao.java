package com.zhongdasoft.svwtrainnet.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhongdasoft.svwtrainnet.greendao.entity.UserMenu;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_MENU".
*/
public class UserMenuDao extends AbstractDao<UserMenu, Long> {

    public static final String TABLENAME = "USER_MENU";

    /**
     * Properties of entity UserMenu.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ResName = new Property(1, String.class, "resName", false, "RES_NAME");
        public final static Property DrawableName = new Property(2, String.class, "drawableName", false, "DRAWABLE_NAME");
        public final static Property ActivityName = new Property(3, String.class, "activityName", false, "ACTIVITY_NAME");
        public final static Property PActivityName = new Property(4, String.class, "pActivityName", false, "P_ACTIVITY_NAME");
        public final static Property Level = new Property(5, Integer.class, "level", false, "LEVEL");
        public final static Property State = new Property(6, Integer.class, "state", false, "STATE");
        public final static Property IsLeaf = new Property(7, Integer.class, "isLeaf", false, "IS_LEAF");
        public final static Property IsValid = new Property(8, Integer.class, "isValid", false, "IS_VALID");
    }


    public UserMenuDao(DaoConfig config) {
        super(config);
    }
    
    public UserMenuDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_MENU\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"RES_NAME\" TEXT NOT NULL ," + // 1: resName
                "\"DRAWABLE_NAME\" TEXT NOT NULL ," + // 2: drawableName
                "\"ACTIVITY_NAME\" TEXT NOT NULL ," + // 3: activityName
                "\"P_ACTIVITY_NAME\" TEXT NOT NULL ," + // 4: pActivityName
                "\"LEVEL\" INTEGER NOT NULL ," + // 5: level
                "\"STATE\" INTEGER NOT NULL ," + // 6: state
                "\"IS_LEAF\" INTEGER NOT NULL ," + // 7: isLeaf
                "\"IS_VALID\" INTEGER NOT NULL );"); // 8: isValid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_MENU\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserMenu entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getResName());
        stmt.bindString(3, entity.getDrawableName());
        stmt.bindString(4, entity.getActivityName());
        stmt.bindString(5, entity.getPActivityName());
        stmt.bindLong(6, entity.getLevel());
        stmt.bindLong(7, entity.getState());
        stmt.bindLong(8, entity.getIsLeaf());
        stmt.bindLong(9, entity.getIsValid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserMenu entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getResName());
        stmt.bindString(3, entity.getDrawableName());
        stmt.bindString(4, entity.getActivityName());
        stmt.bindString(5, entity.getPActivityName());
        stmt.bindLong(6, entity.getLevel());
        stmt.bindLong(7, entity.getState());
        stmt.bindLong(8, entity.getIsLeaf());
        stmt.bindLong(9, entity.getIsValid());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserMenu readEntity(Cursor cursor, int offset) {
        UserMenu entity = new UserMenu( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // resName
            cursor.getString(offset + 2), // drawableName
            cursor.getString(offset + 3), // activityName
            cursor.getString(offset + 4), // pActivityName
            cursor.getInt(offset + 5), // level
            cursor.getInt(offset + 6), // state
            cursor.getInt(offset + 7), // isLeaf
            cursor.getInt(offset + 8) // isValid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserMenu entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setResName(cursor.getString(offset + 1));
        entity.setDrawableName(cursor.getString(offset + 2));
        entity.setActivityName(cursor.getString(offset + 3));
        entity.setPActivityName(cursor.getString(offset + 4));
        entity.setLevel(cursor.getInt(offset + 5));
        entity.setState(cursor.getInt(offset + 6));
        entity.setIsLeaf(cursor.getInt(offset + 7));
        entity.setIsValid(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserMenu entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserMenu entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserMenu entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
